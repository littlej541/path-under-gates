import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'



version = "${mc_version}-${mod_version}-${mod_build}"
group = groupname
archivesBaseName = modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

task processSources(type: Copy) {
    from 'src/main/java'
    into "$buildDir/generated-src"
    filter(ReplaceTokens, tokens: [
            "modid": modid.toString()
    ])
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from (sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: [
                "version": version.toString(),
                "modname": modname.toString(),
                "modid": modid.toString(),
                "authors": authors.toString(),
                "logofile": logofile.toString(),
                "url": url.toString(),
                "issues": issues.toString(),
                "mod_description": mod_description.toString(),
                "license": license.toString(),
                "forge_version_short": forge_version_short.toString(),
                "mc_version": mc_version.toString()
        ])
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": modid,
            "Specification-Vendor": group,
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" : group,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

compileJava {
    source = processSources.outputs
}